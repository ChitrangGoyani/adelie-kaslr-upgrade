diff -ur a/arch/x86/include/asm/paravirt_types.h b/arch/x86/include/asm/paravirt_types.h
--- a/arch/x86/include/asm/paravirt_types.h	2024-04-03 20:22:18.005317409 -0400
+++ b/arch/x86/include/asm/paravirt_types.h	2024-04-03 09:32:51.000000000 -0400
@@ -242,38 +242,14 @@
 extern struct pv_info pv_info;
 extern struct paravirt_patch_template pv_ops;
 
-#ifdef CONFIG_X86_PIE
-#define paravirt_opptr_type "p"
-
-/*
- * Alternative patching requires a maximum of 7 bytes but the relative call is
- * only 6 bytes. If PIE is enabled, add an additional nop to the call
- * instruction to ensure patching is possible.
- *
- * Without PIE, the call is reg/mem64:
- * ff 14 25 68 37 02 82    callq  *0xffffffff82023768
- *
- * With PIE, it is relative to %rip and take 1-less byte:
- * ff 15 fa d9 ff 00       callq  *0xffd9fa(%rip) # <pv_ops+0x30>
- *
- */
-
-#define PARAVIRT_CALL_POST  "nop;"
-#else
-#define paravirt_opptr_type "m"
-#define PARAVIRT_CALL_POST  ""
-#endif
-
-
-#define paravirt_ptr(op)	[paravirt_opptr] paravirt_opptr_type (pv_ops.op)
+#define paravirt_ptr(op)	[paravirt_opptr] "m" (pv_ops.op)
 
 int paravirt_disable_iospace(void);
 
 /* This generates an indirect call based on the operation type number. */
 #define PARAVIRT_CALL					\
 	ANNOTATE_RETPOLINE_SAFE				\
-	"call *%[paravirt_opptr];"			\
-	PARAVIRT_CALL_POST
+	"call *%[paravirt_opptr];"
 
 /*
  * These macros are intended to wrap calls through one of the paravirt
